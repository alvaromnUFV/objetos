// SPDX-License-Identifier: MIT
// Compatible with OpenZeppelin Contracts ^5.0.0
pragma solidity ^0.8.20;

import "@openzeppelin/contracts@5.0.2/token/ERC1155/ERC1155.sol";
import "@openzeppelin/contracts@5.0.2/access/Ownable.sol";
import "@openzeppelin/contracts@5.0.2/token/ERC1155/extensions/ERC1155Burnable.sol";
import "@openzeppelin/contracts@5.0.2/token/ERC1155/extensions/ERC1155Supply.sol";
import "@openzeppelin/contracts@5.0.2/utils/Strings.sol";  // Importar la biblioteca Strings de OpenZeppelin

contract Cartas is ERC1155, Ownable, ERC1155Burnable, ERC1155Supply {

    uint256 public constant espada = 1;
    uint256 public constant escudo = 2;
    uint256 public constant brujula = 3;

    constructor(address initialOwner) ERC1155("https://raw.githubusercontent.com/alvaromnUFV/objetos/main/{id}.json") Ownable(initialOwner) {
        _mint(msg.sender, espada, 3, "");
        _mint(msg.sender, escudo, 7, "");
        _mint(msg.sender, brujula, 15, "");
    }

    function uri(uint256 _tokenId) override public pure returns (string memory) {
        return string(abi.encodePacked("https://raw.githubusercontent.com/alvaromnUFV/objetos/main/", Strings.toString(_tokenId), ".json"));
    }

    function mint(address account, uint256 id, uint256 amount, bytes memory data)
        public
        onlyOwner
    {
        _mint(account, id, amount, data);
    }

    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data)
        public
        onlyOwner
    {
        _mintBatch(to, ids, amounts, data);
    }

    // The following functions are overrides required by Solidity.

    function _update(address from, address to, uint256[] memory ids, uint256[] memory values)
        internal
        override(ERC1155, ERC1155Supply)
    {
        super._update(from, to, ids, values);
    }
}